import UIKit
import SnapKit
import XCPlayground

import UIKit
import SnapKit

// 😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍

// to do, 1) left and right overflowIndicators
//  2) close button
//  3) select behaviour, scroll tab into view

let visibleWidth = CGFloat(400)
let minTabWidth = CGFloat(80)
let tabHeight = CGFloat(24)

var cc = [UIColor.blueColor(), UIColor.yellowColor(), UIColor.greenColor()]

class TabsBarViewController: UIViewController, UIScrollViewDelegate, TabWidgetDelegate {
    var scrollView: UIScrollView!

    var tabs = [TabWidget]()

    var leftOverflowIndicator : CAGradientLayer = CAGradientLayer()
    var rightOverflowIndicator : CAGradientLayer = CAGradientLayer()

    init() {
        super.init(nibName: nil, bundle: nil)

        self.view = UIView(frame: CGRectMake(0, 0, visibleWidth, 60))
        scrollView = UIScrollView(frame: CGRectMake(0, 0, visibleWidth, tabHeight))

        scrollView.bounces = false
        scrollView.contentSize.width = visibleWidth
        scrollView.showsHorizontalScrollIndicator = false

        let adder = UIButton(frame: CGRectMake(0,40,30,30))
        adder.backgroundColor = UIColor.purpleColor()
        view.addSubview(adder)
        adder.addTarget(self, action: #selector(test_adder), forControlEvents: .TouchUpInside)

        scrollView.delegate = self

        view.addSubview(scrollView)
        view.bringSubviewToFront(adder)

        addLeftRightScrollHint(isRightSide: false, vMaskLayer: leftOverflowIndicator)
        addLeftRightScrollHint(isRightSide: true, vMaskLayer: rightOverflowIndicator)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func tabOverflowWidth(tabCount: Int) -> CGFloat {
        return CGFloat(tabCount) * minTabWidth - visibleWidth
    }

    func updateContentSize(tabCount: Int) {
        scrollView.contentSize.width = visibleWidth + tabOverflowWidth(tabCount)
    }

    func overflowIndicators() {
        if tabOverflowWidth(tabs.count) < 1 {
            leftOverflowIndicator.opacity = 0
            rightOverflowIndicator.opacity = 0
            return
        }

        let offset = Float(scrollView.contentOffset.x)
        let startFade = Float(30)
        if offset < startFade {
            leftOverflowIndicator.opacity = offset / startFade
        } else {
            leftOverflowIndicator.opacity = 1

        }

        // all the way scrolled right
        let offsetFromRight = scrollView.contentSize.width - CGFloat(offset) - scrollView.frame.width
        if offsetFromRight < CGFloat(startFade) {
            rightOverflowIndicator.opacity = Float(offsetFromRight) / startFade
        } else {
            rightOverflowIndicator.opacity = 1
        }
    }

    func addTab() {
        let t = TabWidget()
        t.delegate = self
        t.setup()

        scrollView.addSubview(t)
        t.alpha = 0

        //t.backgroundColor = cc.popLast()

        if cc.count < 1 {
            cc = [UIColor.blueColor(), UIColor.yellowColor(), UIColor.greenColor()]
        }

        let w = calcTabWidth(tabs.count + 1)

        UIView.animateWithDuration(0.2, animations: {
            self.tabs.forEach {
                $0.widthConstraint?.updateOffset(w)
            }
            self.scrollView.setNeedsLayout()
            }, completion: { _ in
                UIView.animateWithDuration(0.2) {
                    t.alpha = 1
                }
            }
        )

        t.snp_makeConstraints {
            make in
            t.widthConstraint = make.width.equalTo(w).constraint
            make.height.equalTo(tabHeight)

            if let prev = tabs.last {
                make.left.equalTo(prev.snp_right)
            } else {
                make.left.equalTo(t.superview!)
            }

            tabs.append(t)
        }

        updateContentSize(tabs.count)
        overflowIndicators()
    }

    func calcTabWidth(tabCount: Int) -> CGFloat {
        if tabCount < 1 {
            return visibleWidth
        }
        var w = visibleWidth / (CGFloat(tabCount))
        if w < minTabWidth {
            w = minTabWidth
        }
        return w
    }

    func removeTab(tab: TabWidget) {
        let w = calcTabWidth(tabs.count - 1)
        var index = 0

        UIView.animateWithDuration(0.2, animations: {
            tab.alpha = 0
            for (i, item) in self.tabs.enumerate() {
                if item === tab {
                    index = i
                    item.widthConstraint?.updateOffset(0)
                } else {
                    item.widthConstraint?.updateOffset(w)
                }
            }

            self.scrollView.setNeedsLayout()
            self.updateContentSize(self.tabs.count - 1)
        }) { _ in
            func at(i: Int) -> TabWidget? {
                return 0 ..< self.tabs.count ~= i ? self.tabs[i] : nil
            }

            let prev = at(index - 1)
            let next = at(index + 1)
            next?.snp_makeConstraints(closure: { (make) in
                if let prev = prev {
                    make.left.equalTo(prev.snp_right)
                } else {
                    make.left.equalTo(self.view)
                }
            })

            tab.removeFromSuperview()
            self.tabs.removeAtIndex(index)
            self.overflowIndicators()
        }
    }


    // for testing add function
    func test_adder() {
        addTab()
    }

    //////////////////
    func addLeftRightScrollHint(isRightSide isRightSide: Bool, vMaskLayer: CAGradientLayer) {
        vMaskLayer.removeFromSuperlayer()
        let colors = [UIColor(white: 0.5, alpha: 0).CGColor, UIColor(white:0.0, alpha: 1.0).CGColor]
        let locations = [0.9, 1.0]
        vMaskLayer.startPoint = CGPoint(x: isRightSide ? 0 : 1.0, y: 0.5)
        vMaskLayer.endPoint = CGPoint(x: isRightSide ? 1.0 : 0, y: 0.5)
        vMaskLayer.opacity = 0
        vMaskLayer.colors = colors;
        vMaskLayer.locations = locations;
        vMaskLayer.bounds = CGRectMake(0, 0, scrollView.frame.width, tabHeight)
        vMaskLayer.anchorPoint = CGPointZero;
        // you must add the mask to the root view, not the scrollView, otherwise the masks will move as the user scrolls!
        view.layer.addSublayer(vMaskLayer)
    }


//UIScrollViewDelegate
        func scrollViewDidScroll(scrollView: UIScrollView) {
            overflowIndicators()
        }
////
    func tabWidgetClose(tab: TabWidget) {
        removeTab(tab)
    }

    func tabWidgetSelected(tab: TabWidget) {
        tabs.forEach {
            $0.deselect()
        }
    }
}


// 😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍
// 😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍😍

protocol TabWidgetDelegate: class {
    func tabWidgetClose(tab: TabWidget)
    func tabWidgetSelected(tab: TabWidget)
}

class TabWidget : UIView {
    let title = UIButton()
    let close = UIButton()
    weak var delegate: TabWidgetDelegate?

    var widthConstraint: Constraint? = nil

    func setup() {
        layer.borderWidth = 0.5
        close.addTarget(self, action: #selector(clicked), forControlEvents: .TouchUpInside)
        title.addTarget(self, action: #selector(selected), forControlEvents: .TouchUpInside)

        title.setTitle("asdf asdfaf as", forState: .Normal)

        close.backgroundColor = UIColor.blueColor()

        [close, title].forEach { addSubview($0) }

        close.snp_makeConstraints(closure: { (make) in
            make.top.bottom.left.equalTo(self)
            make.width.equalTo(24)
        })

        title.snp_makeConstraints { (make) in
            make.top.bottom.equalTo(self)
            make.left.equalTo(close.snp_right).offset(4)
            make.right.equalTo(self).inset(4)
        }

        deselect()
    }

    func clicked() {
        delegate?.tabWidgetClose(self)
    }

    func deselect() {
        backgroundColor = UIColor.init(white: 90/255, alpha: 1.0)
        title.titleLabel!.font = UIFont.systemFontOfSize(11)
        title.setTitleColor(UIColor.init(white: 248/255, alpha: 1.0), forState: .Normal)
    }

    func selected() {
        delegate?.tabWidgetSelected(self)

        title.titleLabel!.font = UIFont.systemFontOfSize(11, weight: UIFontWeightSemibold)
        title.setTitleColor(UIColor.init(white: 255/255, alpha: 1.0), forState: .Normal)
        backgroundColor = UIColor.init(white: 67/255, alpha: 1.0)
    }
}

///////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////

var t = TabsBarViewController()
XCPlaygroundPage.currentPage.liveView = t.view

